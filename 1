import random

#Матрица берётся из файла
def choice_1():
    size = 0
    matrix = []
    with open("matrix.txt", "r") as file:
        for string in file:
            line = list(map(int, string.split(',')))
            matrix.append(line)
            size += 1
    return matrix, size

#Матрица генерируется случайно
def choice_2(size):
    matrix = [[random.randint(-10, 10) for x in range(size)] for y in range(size)]
    return matrix

#Копирование матрицы A
def copy_matrix_A(matrix, size):
    return [[matrix[i][j] for j in range(size)] for i in range(size)]

#Печать матрицы
def matrix_output(matrix):
    for line in matrix:
        print(line)
    print()

#Вычитание матриц
def matrix_subtract(m1, m2, size):
    result = [[m1[i][j] - m2[i][j] for j in range(size)] for i in range(size)]
    return result

#Транспонирование матрицы
def trans_matrix(matrix, size):
    return [[matrix[j][i] for j in range(size)] for i in range(size)]

#Умножение матрицы на k
def matrix_x_k(matrix, size, k):
    return [[matrix[i][j] * k for j in range(size)] for i in range(size)]

#Умножение матрицы на матрицу
def matrix_x_matrix(m1, m2, size):
    m3 = [[0 for _ in range(size)] for _ in range(size)]
    for i in range(size):
        for j in range(size):
            for k in range(size):
                m3[i][j] += m1[i][k] * m2[k][j]
    return m3

#Определение областей матрицы и проверка условий
def area_determination(matrix, size, area_number, check=False, coeff=0):
    area = []
    total_number_sum = 0
    total_less_than_k = 0

    for i in range(size):
        for j in range(size):
            if area_defining(i, j, size, area_number):
                area.append(matrix[i][j])
                if check:
                    if area_number == 2 and i % 2 == 0 and matrix[i][j] >= 0:
                        total_number_sum += i
                    if area_number == 3 and j % 2 != 0 and j < coeff:
                        total_less_than_k += 1
    if check:
        return area, total_number_sum if area_number == 2 else total_less_than_k
    return area

def area_defining(i, j, size, area_number):
    if area_number == 1:
        return i > j and i + j < size - 1
    elif area_number == 2: 
        return i < j and i + j < size - 1
    elif area_number == 3:  
        return i < j and i + j > size - 1
    return False

#Перестановка областей
def area_switch_1(matrix, size, chek_result, a1, a2, a3):
    if chek_result > 0:  
        area_switch_2(matrix, size, a2, 3)
        area_switch_2(matrix, size, a3, 2)
    else:  
        a1 = list(reversed(a1))
        a2 = sorted(a2)
        area_switch_2(matrix, size, a2, 1)
        area_switch_2(matrix, size, a1, 2)
    return matrix

def area_switch_2(matrix, size, new_area, area_number):
    index = 0
    for i in range(size):
        for j in range(size):
            if area_defining(i, j, size, area_number):
                matrix[i][j] = new_area[index]
                index += 1

k = int(input('Введите коеффициент (k):\n'))
method = int(input('Выберете способ определения матрицы А:\n1. Из файла\n2. Случайно\n'))
if method == 1:
    matrix_A,n = choice_1()
elif method == 2:
    n = int(input('Введите размер матрицы А (n):\n'))
    matrix_A = choice_2(n)
else:
    print('Неверный выбор')

matrix_F = copy_matrix_A(matrix_A, n)

area_1 = area_determination(matrix_A, n, 1)
area_2, number_sum = area_determination(matrix_A, n, 2, True, k)
area_3, less_than_k = area_determination(matrix_A, n, 3, True, k)

matrix_F = area_switch_1(matrix_F, n, less_than_k - number_sum, area_1, area_2, area_3)

matrix_AT = trans_matrix(matrix_A, n)

matrix_KxA = matrix_x_k(matrix_A, n, k)

matrix_KxAxF = matrix_x_matrix(matrix_KxA, matrix_F, n)

matrix_KxAT = matrix_x_k(matrix_AT, n, k)

matrix_result = matrix_subtract(matrix_KxAxF, matrix_KxAT, n)

print('Матрица А:')
matrix_output(matrix_A)

print('Матрица F:')
matrix_output(matrix_F)

print('Матрица А, умноженная на коэффициент K:')
matrix_output(matrix_KxA)

print('Матрица А, умноженная на коэффициент K, умноженная на матрицу F:')
matrix_output(matrix_KxAxF)

print('Транспонированная матрица А:')
matrix_output(matrix_AT)

print ('Транспонированная матрица А, умноженная на коэффициент K:')
matrix_output(matrix_KxAT)

print('Финальный результат вычисления:')
matrix_output(matrix_result)
